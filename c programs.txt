	`TWIN PRIME NUMBERS
******************************************************************************************************
program:1

 #include <stdio.h>
#include<math.h>
int start, end, n, m, i;
int prime (int m);
void
main ()
{

  printf ("enter the start: ");
  scanf ("%d", &start);
  printf ("enter the end:");
  scanf ("%d", &end);
  n = (end - start)/2;
  int a[n];
  i = 0;
  for (m = start + 1; m <= end; m++)
    {
      if (prime (m))
	{
	  a[i++] = m;
	}

    }
    n=i;
  for (int k = 1; k <= n; k++)
    {
      if ((a[k] - a[k-1]) == 2)
	{
	  printf ("twin prime numbers are:[%d,%d]\n", a[k-1], a[k]);
	}
    }
}
  int prime (int m)
  {
    for (int j = 2; j <= sqrt (m); j++)
      {
	if (m % j == 0)
	  {
	    return 0;

	  }
    }
return 1;
}

program 2:

#include <stdio.h>


int prime(int n){
    int i;
    if(n==1||n==0)
    return 0;
    for(i=2;i<n;i++){
        if(n%i==0)
        return 0;
    }return 1;
}
void main()
{
    int a,b,i,p1,p2;
    printf("enter the range to find twin primes:");
    scanf("%d %d",&a,&b);
    for(i=a;i<b;i++){
        p1=prime(i);
        p2=prime(i+2);
        if(p1&&p2){
            printf("twin primes are:%d,%d\n",i,i+2);
       }
    }
}
********************************************************************************
****************************************************************************
 2:Ram wants to find a lucky number for every number given as input. The lucky number is defined as
 the nearest prime number for the given number . 
Ex: input - 25 
The nearer prime numbers are 23 and 29. So among them the least difference is with 23. So the 
lucky number for 25 is 23.
***************************************************************************************
#include <stdio.h>
#include<math.h>
int n;
int prime(int a){
    int i,j,k,l;
    if(n==0||n==1)
    return 2;
    else if(n==2)
    return 3;
    else{
        for(i=n-1;i>=3;){
            for(j=2;j<=sqrt(i);j++){
                if(i%j==0){
                    break;
                }
            }   if(i%j!=0){
                break;
            }--i;
        }
    }
      for(k=n+1;k>=3;){
            for(l=2;l<=sqrt(k);l++){
                if(k%l==0){
                    break;
                }
            }   if(k%l!=0){
                break;
            }++k;
        }
   if(i>k)
   return k;
   else 
   return i;
}
void main()
{
    int r;
    printf("enter the number ");
    scanf("%d",&n);
    r=prime(n);
    printf(" Ram your lucky number is:%d",r);
}
******************************************************************
*****************************************************************8
3:ice cream's menue:
  selecting 
  print billwith total amt and quantity
  accounts like  total amt for day
 and deduct the quantity in stock and
 increase the stock of ice cream if it is empty(load)
*************************************************************
#include <stdio.h>
#include<stdlib.h>

int  q_vani, q_choco, q_straw,qv=0,qc=0,qs=0,totalprofit,flag = 1;

void bill ()
{
    int total,vanilla = 30, chocolate = 40, strawberry = 50;
    int p1, p2, p3;
    if(qv>=1||qc>=1||qs>=1)
    {
    printf("\nflavour\tquantity\tprice");
    if (qv>1){
        p1 = qv * vanilla;
         printf ("\nvanilla \t%d\t%d\n", qv, p1);
    }
    if (qc>1){
        p2 = qc * chocolate;
        printf ("\nchocolate \t%d\t%d\n", qc, p2);
    }
    if (qs>1){
        p3 = qs * strawberry;
        printf ("\nstrawberry \t%d\t%d\n", qs, p3);
    }
    total = p1 + p2 + p3;
    printf ("totalamt:%d\n", total);
     printf("****Thankyou****\n***Have A Nice Day***\n**** visit agian******\n");
    totalprofit=totalprofit+p1+p2+p3;
    qs=qc=qv=p1=p2=p3=0;
    }
}


void main ()
{

  int  ch, flag = 1;
  int q_v = 100, q_c = 200, q_s = 150;
 

    do
    {
     
        do
        {
            printf("menu\n 1:vanilla--30rs\n 2:chocolate--40rs\n 3:strawberry--50rs\n 4:exit\n place your order:");
	        scanf ("%d", &ch);
	        switch (ch)
	        {
	            case 1:if (q_v < 10)
		               {
		                   printf ("out of stock kindly wait for 1 hour we are loading");
		                   q_v=q_v+100;
		               }
                       else
		               {
		                    printf ("enter the quantity:");
		                    scanf ("%d", &q_vani);
		                    qv=qv+q_vani;
		                    q_v = q_v - q_vani;
	                   }
	                   break;
	            case 2:if (q_c < 10)
		               {
		                    printf ("out of stock kindly wait for 1 hour we are loading");
		                    q_c=q_c+100;
		               }
	                   else
		               {
		                    printf ("enter the quantity:");
		                    scanf ("%d", &q_choco);
		                    qc=qc+q_choco;
		                    q_c = q_c - q_choco;
		    
		               }
        	            break;
	            case 3: if (q_s < 10)
		                {
		                     printf ("out of stock kindly wait for 1 hour we are loading");
		                     q_s=q_s+100;
		                }
	                    else
		                {
		                    printf ("enter the quantity:");
		                    scanf ("%d", &q_straw);
		                    qs=qs+q_straw;
		                    q_s = q_s - q_straw;
		                }
	                    break;
	           case 4: exit(0);
	                   break;
	           
	           case 1950:  printf ("total profit forthe day:%d \n", totalprofit);
	                       printf ("quantity\nvanilla:%d\tchocolate:%d\tstrawberry:%d", q_v,
		                   q_c, q_s); 
		                   break;
    
	           
	        default:printf ("out of choice");
            }
	    printf ("\n if u need anything  else (yes=1/no=0):");
	    scanf ("%d", &flag);
	   if(flag>1)
     {
         printf("wrong choice kindly enter the choice correctly to extend your order (yes=1/no=0):");
         scanf("%d",&flag);
        
     }
        }while (flag);
    bill ();
    printf("next order(yes=1/no=0)");
     scanf("%d",&flag);
     if(flag>1)
     {
         printf("wrong choice kindly enter the choice correctly for next or extend your order (yes=1/no=0):");
         scanf("%d",&flag);
        
     }
     
    }while(flag);
    
    
}



***************************************************************

 DOUBLE linked list sorting
**************************************************************

#include <stdio.h>
#include<stdlib.h>

struct Double
{
  struct Double *link_N;
  struct Double *link_P;
  int info;
};
typedef struct Double NODE;
NODE *start = NULL;
NODE *end = NULL;
int item;
void
display ()
{
  NODE *ptr = start;
  if (start == NULL)
    {
      printf ("the list is empty");
      return;
    }
  while (ptr != NULL)
    {
      printf ("%d->", ptr->info);
      ptr = ptr->link_N;

    }
  printf ("NULL");
}

void
insertbeg (int item)
{
  NODE *newnode = (NODE *) malloc (sizeof (NODE));
  newnode->info = item;
  if (start == NULL)
    {
      end = newnode;
    }

  newnode->link_N = start;
  start = newnode;
  newnode->link_P = start;
}

void
sort ()
{
  NODE *prev = NULL;
  int temp;
  NODE *ptr = NULL;
  for (prev = start; prev->link_N != NULL; prev = prev->link_N)
    {
      for (ptr = prev->link_N; ptr != NULL; ptr = ptr->link_N)
	{
	  if (prev->info > ptr->info)
	    {
	      temp = prev->info;
	      prev->info = ptr->info;
	      ptr->info = temp;
	    }
	}
    }
}

void
main ()
{
  printf ("*********** ENTER 222 TO EXIT*************\n");
  while (item != 222)
    {
      printf ("\nenter the number to be inserted:");
      scanf ("%d", &item);
      insertbeg (item);
    }
  printf ("\n***BEFORE SORTING***\n");
  display ();
  sort ();
  printf ("\n***AFTER SORTING**\n*");
  display ();
}
*********************************************************************
QUEUE IN STACK
***********************************************************************
#include <stdio.h>
#include<stdlib.h>
#define N 5
int  top=-1,item;int S[N];

int pop()
{
    int temp[N],j=-1;
    for(int i=top;i>0;i--)
    {
        j++;
        temp[j]=S[top];
        top--;
        
    }
    if(top==0)
        {
            printf("\ndeleted item is %d\n",S[top]);
            top--;
            
        }
    for(int i=j;i>=0;i--)
    {
    top++;
    S[top]=temp[j];
    j--;
    }
    
    
}
int push()
{
    if(top==N-1)
    {
        printf("\nqueue is full\n");
    }else
    {
    printf("\nenter the item to insert:\n");
    scanf("%d",&item);
    S[++top]=item;
    
    }
}
int display()
{
    if(top==-1)
    {
        printf("\nqueue is empty\n");
        
    }
    else
    {
        printf("\nqueue elements are:");
        for(int i=0;i<=top;i++)
        {
            printf("%d\t",S[i]);
        }
    }
    
}
int main()
{
   int ch;
   while(1)
   {
        printf("\n1.insert\n2.delete\n3.display\n4.exit\n enter your choice:");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1: push();
                    display();
                    break;
            case 2: pop();
                    display();
                    break;
            case 3: display();
                    break;
            case 4: exit(0);
            default: printf("\nwrong choice\n");

        }
   }
  

}
*********************************************************************
linked list 
********************************************************************
#include <stdio.h>
#include <stdlib.h>

struct node
{
    int info;
    struct node *link;
};

typedef struct node NODE;
NODE *start = NULL;
int item;

void display()
{
    NODE *ptr = start;
    if (start == NULL)
    {
        printf("list is empty");
    }
    else
    {
        printf("list contents are");
        while (ptr != NULL)
        {
            printf("%d->", ptr->info);
            ptr = ptr->link;
        }
        printf("NULL\n");
    }
}
void insertbeg(int item)
{
    NODE *newnode;
    newnode = (NODE *)malloc(sizeof(NODE));
    newnode->info = item;
    newnode->link = start;
    start = newnode;
}

void insertend(int item)
{
    NODE *ptr = start;
    NODE *newnode = (NODE *)malloc(sizeof(NODE));
    while (ptr->link != NULL)
    {
        ptr = ptr->link;
    }
    newnode->info = item;
    newnode->link = NULL;
    ptr->link = newnode;
}

void delete()
{
    int item;
    NODE* ptr=start;
    NODE* pointer;
     if (start == NULL)
    {
        printf("list is empty");
    }
    printf("enter the item to br deleted:");
    scanf("%d",&item);
    if(ptr->info==item)
    {
        pointer=ptr->link;
        free(ptr);
        start=pointer;
    }
    else
    {
        while(ptr->link->info!=item )
        {
        
            ptr=ptr->link;
        }
        pointer=ptr->link;
        ptr->link=ptr->link->link;
        ptr=pointer;
        free(ptr);
      
    }

}

int main()
{
    int ch;
    while (1)
    {
        printf("\n1: Insert at the beginning\n2: Insert at the end\n3: Delete \n4: Display\n5: Exit\nEnter your choice: ");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            printf("Enter the element to be inserted: ");
            scanf("%d", &item);
            insertbeg(item);
            display();
            break;
        case 2:
            printf("Enter the element to be inserted: ");
            scanf("%d", &item);
            insertend(item);
            display();
            break;
        case 3:
            delete();
            display();
            break;

        case 4:
            display();
            break;
        case 5:
            exit(0);
        default:
            printf("Wrong choice\n");
        }
    }

    return 0;
}
***********************************************************************
double linked list  (still should be updated)
*********************************************************************
stdio.h>
#include<stdlib.h>

struct Double
{
  struct Double *link_N;
  struct Double *link_P;
  int info;
};
typedef struct Double NODE;
NODE *start = NULL;
NODE *end = NULL;
int item;
void
display ()
{
  NODE *ptr = start;
  if (start == NULL)
    {
      printf ("the list is empty");
      return;
    }
  printf ("\nend item: %d \n", end->info);
  while (ptr != NULL)
    {
      printf ("%d->", ptr->info);
      ptr = ptr->link_N;

    }
  printf ("NULL");
}

void insertbeg (int item)
{
  NODE *newnode = (NODE *) malloc (sizeof (NODE));
  newnode->info = item;
  if (start == NULL)
    {
      end = newnode;
    }

  newnode->link_N = start;
  start = newnode;
  newnode->link_P = start;
}

void insertend (int item)
{

  NODE *newnode = (NODE *) malloc (sizeof (NODE));
  newnode->info = item;
  end->link_N = newnode;
  newnode->link_P = end;
  end = newnode;
  newnode->link_N = NULL;
}
void specified_insert(int item)
{
    int temp;
    NODE *ptr=start;
     printf("enter the specified item after the insertion should be done:");
    scanf("%d",&temp);
    
    NODE *newnode = (NODE *) malloc (sizeof (NODE));
    newnode->info = item;
    while(ptr->info!=temp)
    {
        ptr=ptr->link_N;
        
    }
    if(ptr->link_N==NULL)
    {
      end->link_N = newnode;
      newnode->link_P = end;
      end = newnode;
    newnode->link_N = NULL;
    }
    else
    {
    newnode->link_N=ptr->link_N;
    newnode->link_N->link_P=newnode;
    newnode->link_P=ptr;
    ptr->link_N=newnode;
    printf("%d",ptr->link_N->info);
     while (ptr != NULL)
    {
      printf ("%d->", ptr->info);
      ptr = ptr->link_N;

    }
    }
}
void delete_specified()
{
    NODE *ptr=start;
    printf("enter the item to be deleted:");
    scanf("%d",&item);
    while(ptr->info!=item)
    {
        ptr=ptr->link_N;
    }
    if(ptr==end)
    {
        end=ptr->link_P;
    }
    ptr->link_N->link_P=ptr->link_P;
    ptr->link_P->link_N=ptr->link_N;
    printf("the deleted item is%d",ptr->info);
    free(ptr);
}




void main ()
{
  int ch;
  while (1)
    {
      printf("\n 1:insertbeg\n2:insertend\n3:insert after specified item:\n4:delete specified\n5:dispaly\n6:exit\n enter your choice: ");
      scanf ("%d", &ch);

      switch (ch)
	{
	case 1:
	  printf ("enter the item to be inserted:");
	  scanf ("%d", &item);
	  insertbeg (item);
	  display ();
	  break;
	case 2:
	  if(start==NULL)
      {
         printf("list  is empty going to insert beginning");
         insertbeg(item);
      }
      printf ("enter the item to be inserted:");
	  scanf ("%d", &item);
	  insertend (item);
	  display ();
	  break;
	 case 3:
	 if(start==NULL)
    {
        printf("list  is empty going to insert beginning");
        insertbeg(item);
    }
	  printf ("enter the item to be inserted:");
	  scanf ("%d", &item);
	   specified_insert(item);
	   display();
	   break;
	   case 4:
	   delete_specified();
	   display();
	   break;
	   case 5:
	   display();
	   break;
	case 6:
	  exit (0);

	}
    }
}
************************************************************************************************
stack reverse without using extra memory(RECURSION)
************************************************************************************************
#include<stdio.h>
#include<stdlib.h>
#define n 5
int s[n],top=-1;
int peek(){
    int peek=s[top];
    return peek;
}
void pop(){
    if(top==-1)
    printf("stack is empty");
    else{
        printf("popprd element is:%d\n",s[top]);
        top--;
    }
}
void push(int temp){
  //  printf("inside push");
    if(top==n-1)
        printf("stack overflow\n");
    else{
        top++;
        //printf("top=%d\n",top);
        s[top]=temp;
    }
}
void insertAtBottom(int temp){
    if(top==-1){
       // printf("temp=%d",temp);
        push(temp);
        
       /// printf(" reversed stact %d\n",s[temp]);
    }
    
    else{
        int t=peek();
        pop();
        insertAtBottom(temp);
        push(t);
    }
        if(top==n-1){
        printf("reversed stack");
    for(int i=top;i>=0;i--)
    printf(" %d\n",s[i]);
    }
        
    
   
}
void reverse(){
   // printf("\ninside reverce fun\n");
   // printf("topvalue=%d \n",top);
    if(!(top==-1)){
       // printf("inside if b4 peek");
     int temp=peek();
    pop();
    reverse();
    printf("after recursion\n temp=%d",temp);
    insertAtBottom(temp);
     
    }
    
}

void main(){
    int value;
    printf("enter any five elements:");
    for( int i=0;i<n;i++)
    {
    scanf("%d",&value);
    push(value);
    }
   /// printf("top=%d",top);
    reverse();
    
   

}
********************************************************************************************
Linked list operations without 2 pointers for traversal .
**********************************************************************************************
#include <stdio.h>
#include <stdlib.h>

struct node
{
    int info;
    struct node *link;
};

typedef struct node NODE;
NODE *start = NULL;
int item;

void display()
{
    NODE *ptr = start;
    if (start == NULL)
    {
        printf("list is empty");
    }
    else
    {
        printf("list contents are");
        while (ptr != NULL)
        {
            printf("%d->", ptr->info);
            ptr = ptr->link;
        }
        printf("NULL\n");
    }
}
void insertbeg(int item)
{
    NODE *newnode;
    newnode = (NODE *)malloc(sizeof(NODE));
    newnode->info = item;
    newnode->link = start;
    start = newnode;
}

void insertend(int item)
{
    NODE *ptr = start;
    NODE *newnode = (NODE *)malloc(sizeof(NODE));
    while (ptr->link != NULL)
    {
        ptr = ptr->link;
    }
    newnode->info = item;
    newnode->link = NULL;
    ptr->link = newnode;
}

void delete()
{
    int item;
    NODE* ptr=start;
    NODE* pointer;
     if (start == NULL)
    {
        printf("list is empty");
    }
    printf("enter the item to br deleted:");
    scanf("%d",&item);
    if(ptr->info==item)
    {
        pointer=ptr->link;
        free(ptr);
        start=pointer;
    }
    else
    {
        while(ptr->link->info!=item )
        {
        
            ptr=ptr->link;
        }
        pointer=ptr->link;
        ptr->link=ptr->link->link;
        ptr=pointer;
        free(ptr);
      
    }

}

int main()
{
    int ch;
    while (1)
    {
        printf("\n1: Insert at the beginning\n2: Insert at the end\n3: Delete \n4: Display\n5: Exit\nEnter your choice: ");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            printf("Enter the element to be inserted: ");
            scanf("%d", &item);
            insertbeg(item);
            display();
            break;
        case 2:
            printf("Enter the element to be inserted: ");
            scanf("%d", &item);
            insertend(item);
            display();
            break;
        case 3:
            delete();
            display();
            break;

        case 4:
            display();
            break;
        case 5:
            exit(0);
        default:
            printf("Wrong choice\n");
        }
    }

    return 0;
}
*********************************************************************************************************************